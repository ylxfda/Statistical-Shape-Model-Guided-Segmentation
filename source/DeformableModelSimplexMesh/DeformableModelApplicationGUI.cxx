// generated by Fast Light User Interface Designer (fluid) version 1.0107

#include "DeformableModelApplicationGUI.h"

void DeformableModelApplicationGUI::cb_Load_i(Fl_Menu_*, void*) {
  this->Load();
}
void DeformableModelApplicationGUI::cb_Load(Fl_Menu_* o, void* v) {
  ((DeformableModelApplicationGUI*)(o->parent()->user_data()))->cb_Load_i(o,v);
}

void DeformableModelApplicationGUI::cb_Load1_i(Fl_Menu_*, void*) {
  this->LoadPreprocessed();
}
void DeformableModelApplicationGUI::cb_Load1(Fl_Menu_* o, void* v) {
  ((DeformableModelApplicationGUI*)(o->parent()->user_data()))->cb_Load1_i(o,v);
}

void DeformableModelApplicationGUI::cb_Load2_i(Fl_Menu_*, void*) {
  this->LoadMesh();
}
void DeformableModelApplicationGUI::cb_Load2(Fl_Menu_* o, void* v) {
  ((DeformableModelApplicationGUI*)(o->parent()->user_data()))->cb_Load2_i(o,v);
}

void DeformableModelApplicationGUI::cb_Load3_i(Fl_Menu_*, void*) {
  this->LoadCoefficients();
}
void DeformableModelApplicationGUI::cb_Load3(Fl_Menu_* o, void* v) {
  ((DeformableModelApplicationGUI*)(o->parent()->user_data()))->cb_Load3_i(o,v);
}

void DeformableModelApplicationGUI::cb_Preprocess_i(Fl_Menu_*, void*) {
  this->ComputeInternalForces();
}
void DeformableModelApplicationGUI::cb_Preprocess(Fl_Menu_* o, void* v) {
  ((DeformableModelApplicationGUI*)(o->parent()->user_data()))->cb_Preprocess_i(o,v);
}

void DeformableModelApplicationGUI::cb_Save_i(Fl_Menu_*, void*) {
  this->SaveMesh();
}
void DeformableModelApplicationGUI::cb_Save(Fl_Menu_* o, void* v) {
  ((DeformableModelApplicationGUI*)(o->parent()->user_data()))->cb_Save_i(o,v);
}

void DeformableModelApplicationGUI::cb_Save1_i(Fl_Menu_*, void*) {
  this->SaveMask();
}
void DeformableModelApplicationGUI::cb_Save1(Fl_Menu_* o, void* v) {
  ((DeformableModelApplicationGUI*)(o->parent()->user_data()))->cb_Save1_i(o,v);
}

void DeformableModelApplicationGUI::cb_Quit_i(Fl_Menu_*, void*) {
  this->Quit();
}
void DeformableModelApplicationGUI::cb_Quit(Fl_Menu_* o, void* v) {
  ((DeformableModelApplicationGUI*)(o->parent()->user_data()))->cb_Quit_i(o,v);
}

void DeformableModelApplicationGUI::cb_Deform_i(Fl_Menu_*, void*) {
  this->DeformMesh();
}
void DeformableModelApplicationGUI::cb_Deform(Fl_Menu_* o, void* v) {
  ((DeformableModelApplicationGUI*)(o->parent()->user_data()))->cb_Deform_i(o,v);
}

void DeformableModelApplicationGUI::cb_Show_i(Fl_Menu_*, void*) {
  this->ToggleImage();
}
void DeformableModelApplicationGUI::cb_Show(Fl_Menu_* o, void* v) {
  ((DeformableModelApplicationGUI*)(o->parent()->user_data()))->cb_Show_i(o,v);
}

void DeformableModelApplicationGUI::cb_How_i(Fl_Menu_*, void*) {
  Fl_Help_Dialog  *help;    // Help dialog
help = new Fl_Help_Dialog;
help->load("how_to_use.html");
help->show();
}
void DeformableModelApplicationGUI::cb_How(Fl_Menu_* o, void* v) {
  ((DeformableModelApplicationGUI*)(o->parent()->user_data()))->cb_How_i(o,v);
}

void DeformableModelApplicationGUI::cb_About_i(Fl_Menu_*, void*) {
  m_AboutWindow->show();
}
void DeformableModelApplicationGUI::cb_About(Fl_Menu_* o, void* v) {
  ((DeformableModelApplicationGUI*)(o->parent()->user_data()))->cb_About_i(o,v);
}

Fl_Menu_Item DeformableModelApplicationGUI::menu_[] = {
 {"File", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Load Image", 0,  (Fl_Callback*)DeformableModelApplicationGUI::cb_Load, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Load Preprocessed Image", 0,  (Fl_Callback*)DeformableModelApplicationGUI::cb_Load1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Load Prior Model Mesh", 0,  (Fl_Callback*)DeformableModelApplicationGUI::cb_Load2, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Load Coefficients", 0,  (Fl_Callback*)DeformableModelApplicationGUI::cb_Load3, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Preprocess Image", 0,  (Fl_Callback*)DeformableModelApplicationGUI::cb_Preprocess, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Save Mesh", 0,  (Fl_Callback*)DeformableModelApplicationGUI::cb_Save, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Save Coefficients", 0,  (Fl_Callback*)DeformableModelApplicationGUI::cb_Save1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Quit", 0,  (Fl_Callback*)DeformableModelApplicationGUI::cb_Quit, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Segmentation", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Deform Mesh", 0,  (Fl_Callback*)DeformableModelApplicationGUI::cb_Deform, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Show original/Show Preprocessed", 0,  (Fl_Callback*)DeformableModelApplicationGUI::cb_Show, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Help", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"How to use?", 0,  (Fl_Callback*)DeformableModelApplicationGUI::cb_How, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"About", 0,  (Fl_Callback*)DeformableModelApplicationGUI::cb_About, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};

void DeformableModelApplicationGUI::cb_axialViewSlider_i(Fl_Value_Slider* o, void*) {
  this->SelectAxialSlice( static_cast<int>( o->value() ));
}
void DeformableModelApplicationGUI::cb_axialViewSlider(Fl_Value_Slider* o, void* v) {
  ((DeformableModelApplicationGUI*)(o->parent()->user_data()))->cb_axialViewSlider_i(o,v);
}

void DeformableModelApplicationGUI::cb_coronalViewSlider_i(Fl_Value_Slider* o, void*) {
  this->SelectCoronalSlice( static_cast<int>( o->value() ) );
}
void DeformableModelApplicationGUI::cb_coronalViewSlider(Fl_Value_Slider* o, void* v) {
  ((DeformableModelApplicationGUI*)(o->parent()->user_data()))->cb_coronalViewSlider_i(o,v);
}

void DeformableModelApplicationGUI::cb_sagittalViewSlider_i(Fl_Value_Slider* o, void*) {
  this->SelectSagittalSlice( static_cast<int>( o->value() ) );
}
void DeformableModelApplicationGUI::cb_sagittalViewSlider(Fl_Value_Slider* o, void* v) {
  ((DeformableModelApplicationGUI*)(o->parent()->user_data()))->cb_sagittalViewSlider_i(o,v);
}

void DeformableModelApplicationGUI::cb_m_AboutWindow_i(Fl_Double_Window*, void*) {
  m_AboutWindow->hide();
}
void DeformableModelApplicationGUI::cb_m_AboutWindow(Fl_Double_Window* o, void* v) {
  ((DeformableModelApplicationGUI*)(o->user_data()))->cb_m_AboutWindow_i(o,v);
}

DeformableModelApplicationGUI::DeformableModelApplicationGUI() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = mainWindow = new Fl_Double_Window(870, 820, "SSWM-Segmentation");
    w = o;
    o->color((Fl_Color)46);
    o->labelfont(1);
    o->user_data((void*)(this));
    { Fl_Menu_Bar* o = new Fl_Menu_Bar(0, 0, 870, 20);
      o->menu(menu_);
    }
    { vtkFlRenderWindowInteractor* o = axialView = new vtkFlRenderWindowInteractor(0, 20, 420, 375, "Axial");
      o->box(FL_DOWN_FRAME);
      o->color(FL_BACKGROUND_COLOR);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(5);
      o->labelsize(14);
      o->labelcolor(FL_FOREGROUND_COLOR);
      o->align(FL_ALIGN_BOTTOM);
      o->when(FL_WHEN_RELEASE);
    }
    { Fl_Value_Slider* o = axialViewSlider = new Fl_Value_Slider(420, 20, 20, 375);
      o->maximum(100);
      o->step(1);
      o->callback((Fl_Callback*)cb_axialViewSlider);
    }
    { vtkFlRenderWindowInteractor* o = coronalView = new vtkFlRenderWindowInteractor(445, 20, 400, 375, "Coronal");
      o->box(FL_DOWN_FRAME);
      o->color(FL_BACKGROUND_COLOR);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(5);
      o->labelsize(14);
      o->labelcolor(FL_FOREGROUND_COLOR);
      o->align(FL_ALIGN_BOTTOM);
      o->when(FL_WHEN_RELEASE);
    }
    { Fl_Value_Slider* o = coronalViewSlider = new Fl_Value_Slider(845, 20, 20, 375);
      o->maximum(100);
      o->step(1);
      o->callback((Fl_Callback*)cb_coronalViewSlider);
    }
    { vtkFlRenderWindowInteractor* o = sagittalView = new vtkFlRenderWindowInteractor(445, 410, 400, 390, "Sagittal");
      o->box(FL_DOWN_FRAME);
      o->color(FL_BACKGROUND_COLOR);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(5);
      o->labelsize(14);
      o->labelcolor(FL_FOREGROUND_COLOR);
      o->align(FL_ALIGN_BOTTOM);
      o->when(FL_WHEN_RELEASE);
    }
    { Fl_Value_Slider* o = sagittalViewSlider = new Fl_Value_Slider(845, 410, 20, 390);
      o->maximum(100);
      o->step(1);
      o->callback((Fl_Callback*)cb_sagittalViewSlider);
    }
    { vtkFlRenderWindowInteractor* o = surfaceView = new vtkFlRenderWindowInteractor(0, 410, 440, 390, "Surface Mesh");
      o->box(FL_DOWN_FRAME);
      o->color(FL_BACKGROUND_COLOR);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(5);
      o->labelsize(14);
      o->labelcolor(FL_FOREGROUND_COLOR);
      o->align(FL_ALIGN_BOTTOM);
      o->when(FL_WHEN_RELEASE);
    }
    o->end();
    o->resizable(o);
  }
  { Fl_Double_Window* o = m_AboutWindow = new Fl_Double_Window(191, 104, "About ");
    w = o;
    o->color(FL_DARK1);
    o->callback((Fl_Callback*)cb_m_AboutWindow, (void*)(this));
    { Fl_Text_Display* o = m_TextDisplay = new Fl_Text_Display(-5, -5, 285, 170);
      o->color(FL_DARK1);
      Fl_Group::current()->resizable(o);
    }
    o->end();
  }
  m_TextBuffer.append("\n            Li Yang\n\n   National University of Singapore\n");
m_TextDisplay->buffer(m_TextBuffer);
}

DeformableModelApplicationGUI::~DeformableModelApplicationGUI() {
}

void DeformableModelApplicationGUI::Help() {
}

void DeformableModelApplicationGUI::Quit() {
}

void DeformableModelApplicationGUI::SaveMask() {
}

void DeformableModelApplicationGUI::SaveMesh() {
}

void DeformableModelApplicationGUI::DeformMesh() {
}

void DeformableModelApplicationGUI::LoadMesh() {
}

void DeformableModelApplicationGUI::CreateMesh() {
}

void DeformableModelApplicationGUI::Load() {
}

void DeformableModelApplicationGUI::Show() {
}

void DeformableModelApplicationGUI::Hide() {
}

void DeformableModelApplicationGUI::SelectAxialSlice( int ) {
}

void DeformableModelApplicationGUI::SelectCoronalSlice( int ) {
}

void DeformableModelApplicationGUI::SelectSagittalSlice( int ) {
}

void DeformableModelApplicationGUI::ComputeInternalForces() {
}

void DeformableModelApplicationGUI::LoadPreprocessed() {
}

void DeformableModelApplicationGUI::ToggleImage() {
}

void DeformableModelApplicationGUI::LoadCoefficients() {
}
